#!/bin/bash

LIBRARY=${LIBRARY:-'/usr/share/makepkg'}
source "$LIBRARY"/util/message.sh

colorize

function preboot {

  # Combine initrds
  cat /boot/intel-ucode.img /boot/initramfs-linux.img > /boot/unified-ucode-initramfs.img

  # Create unified EFI executable
  objcopy \
    --add-section .osrel="/usr/lib/os-release" --change-section-vma .osrel=0x20000 \
    --add-section .cmdline="/boot/kernel-command-line.txt" --change-section-vma .cmdline=0x30000 \
    --add-section .linux="/boot/vmlinuz-linux" --change-section-vma .linux=0x40000 \
    --add-section .initrd="/boot/unified-ucode-initramfs.img" --change-section-vma .initrd=0x3000000 \
    "/usr/lib/systemd/boot/efi/linuxx64.efi.stub" "/boot/EFI/Linux/Linux.efi"

  msg "Preboot setup complete."
  msg "Please reboot to complete the postboot script."
  touch ~/.tpm_postboot
}

function postboot {
  # Remove old key
  tpm2_evictcontrol -C o -c 0x81000000

  # Add key to TPM
  #tpm2_createpolicy --policy-pcr -l sha1:0,7 -L policy.digest
  #tpm2_createprimary -C e -g sha1 -G rsa -c primary.context
  #tpm2_create -g sha256 -u obj.pub -r obj.priv -C primary.context -L policy.digest -a "noda|adminwithpolicy|fixedparent|fixedtpm" -i /opt/.keys/root_luks2.bin
  #tpm2_load -C primary.context -u obj.pub -r obj.priv -c load.context
  #tpm2_evictcontrol -C o -c load.context 0x81000000
  #rm load.context obj.priv obj.pub policy.digest primary.context


  tpm2_createpolicy --policy-pcr -l sha1:0,2,4,7 -L policy.digest
  tpm2_createprimary -C e -g sha1 -G rsa -c primary.context
  tpm2_create -g sha256 -u obj.pub -r obj.priv -C primary.context -L policy.digest -a "noda|adminwithpolicy|fixedparent|fixedtpm" -i /opt/.keys/root_luks2.bin
  tpm2_load -C primary.context -u obj.pub -r obj.priv -c load.context
  tpm2_evictcontrol -C o -c load.context 0x81000000
  rm load.context obj.priv obj.pub policy.digest primary.context
}

function postbootif {
  if [ -f ~/.tpm_postboot ]; then
    postboot
    rm ~/.tpm_postboot
  fi
}

function usage {
  msg "Usage: tpmKernel [preboot|postboot|help]"
}

if [[ $(/usr/bin/id -u) -ne 0 ]]; then
  error "This script must be run as root."
  exit 1
fi

if [ "$1" != "" ]; then 
  case $1 in
    preboot)
      preboot
      ;;
    postboot)
      postboot
      ;;
    postbootif)
      postbootif
      ;;
    *)
      usage
      ;;
  esac
else
  usage
fi
